/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BaseTokenURI,
  BaseTokenURIInterface,
} from "../../../../../@divergencetech/ethier/contracts/erc721/BaseTokenURI";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseTokenURI",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "baseTokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseTokenURI",
        type: "string",
      },
    ],
    name: "setBaseTokenURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001265380380620012658339818101604052810190620000379190620003ad565b620000576200004b6200006f60201b60201c565b6200007760201b60201c565b62000068816200013b60201b60201c565b50620007b3565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200014b6200016060201b60201c565b80600190816200015c919062000649565b5050565b620001706200006f60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000196620001f160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001ef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e69062000791565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002838262000238565b810181811067ffffffffffffffff82111715620002a557620002a462000249565b5b80604052505050565b6000620002ba6200021a565b9050620002c8828262000278565b919050565b600067ffffffffffffffff821115620002eb57620002ea62000249565b5b620002f68262000238565b9050602081019050919050565b60005b838110156200032357808201518184015260208101905062000306565b60008484015250505050565b6000620003466200034084620002cd565b620002ae565b90508281526020810184848401111562000365576200036462000233565b5b6200037284828562000303565b509392505050565b600082601f8301126200039257620003916200022e565b5b8151620003a48482602086016200032f565b91505092915050565b600060208284031215620003c657620003c562000224565b5b600082015167ffffffffffffffff811115620003e757620003e662000229565b5b620003f5848285016200037a565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200045157607f821691505b60208210810362000467576200046662000409565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004d17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000492565b620004dd868362000492565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200052a620005246200051e84620004f5565b620004ff565b620004f5565b9050919050565b6000819050919050565b620005468362000509565b6200055e620005558262000531565b8484546200049f565b825550505050565b600090565b6200057562000566565b620005828184846200053b565b505050565b5b81811015620005aa576200059e6000826200056b565b60018101905062000588565b5050565b601f821115620005f957620005c3816200046d565b620005ce8462000482565b81016020851015620005de578190505b620005f6620005ed8562000482565b83018262000587565b50505b505050565b600082821c905092915050565b60006200061e60001984600802620005fe565b1980831691505092915050565b60006200063983836200060b565b9150826002028217905092915050565b6200065482620003fe565b67ffffffffffffffff81111562000670576200066f62000249565b5b6200067c825462000438565b62000689828285620005ae565b600060209050601f831160018114620006c15760008415620006ac578287015190505b620006b885826200062b565b86555062000728565b601f198416620006d1866200046d565b60005b82811015620006fb57848901518255600182019150602085019450602081019050620006d4565b868310156200071b578489015162000717601f8916826200060b565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200077960208362000730565b9150620007868262000741565b602082019050919050565b60006020820190508181036000830152620007ac816200076a565b9050919050565b610aa280620007c36000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806330176e131461005c578063715018a6146100785780638da5cb5b14610082578063d547cfb7146100a0578063f2fde38b146100be575b600080fd5b610076600480360381019061007191906104e7565b6100da565b005b6100806100f5565b005b61008a610109565b6040516100979190610571565b60405180910390f35b6100a8610132565b6040516100b5919061060b565b60405180910390f35b6100d860048036038101906100d39190610659565b6101c0565b005b6100e2610243565b80600190816100f1919061089c565b5050565b6100fd610243565b61010760006102c1565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001805461013f906106b5565b80601f016020809104026020016040519081016040528092919081815260200182805461016b906106b5565b80156101b85780601f1061018d576101008083540402835291602001916101b8565b820191906000526020600020905b81548152906001019060200180831161019b57829003601f168201915b505050505081565b6101c8610243565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022e906109e0565b60405180910390fd5b610240816102c1565b50565b61024b610385565b73ffffffffffffffffffffffffffffffffffffffff16610269610109565b73ffffffffffffffffffffffffffffffffffffffff16146102bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690610a4c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103f4826103ab565b810181811067ffffffffffffffff82111715610413576104126103bc565b5b80604052505050565b600061042661038d565b905061043282826103eb565b919050565b600067ffffffffffffffff821115610452576104516103bc565b5b61045b826103ab565b9050602081019050919050565b82818337600083830152505050565b600061048a61048584610437565b61041c565b9050828152602081018484840111156104a6576104a56103a6565b5b6104b1848285610468565b509392505050565b600082601f8301126104ce576104cd6103a1565b5b81356104de848260208601610477565b91505092915050565b6000602082840312156104fd576104fc610397565b5b600082013567ffffffffffffffff81111561051b5761051a61039c565b5b610527848285016104b9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061055b82610530565b9050919050565b61056b81610550565b82525050565b60006020820190506105866000830184610562565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105c65780820151818401526020810190506105ab565b60008484015250505050565b60006105dd8261058c565b6105e78185610597565b93506105f78185602086016105a8565b610600816103ab565b840191505092915050565b6000602082019050818103600083015261062581846105d2565b905092915050565b61063681610550565b811461064157600080fd5b50565b6000813590506106538161062d565b92915050565b60006020828403121561066f5761066e610397565b5b600061067d84828501610644565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106cd57607f821691505b6020821081036106e0576106df610686565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026107487fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261070b565b610752868361070b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061079961079461078f8461076a565b610774565b61076a565b9050919050565b6000819050919050565b6107b38361077e565b6107c76107bf826107a0565b848454610718565b825550505050565b600090565b6107dc6107cf565b6107e78184846107aa565b505050565b5b8181101561080b576108006000826107d4565b6001810190506107ed565b5050565b601f82111561085057610821816106e6565b61082a846106fb565b81016020851015610839578190505b61084d610845856106fb565b8301826107ec565b50505b505050565b600082821c905092915050565b600061087360001984600802610855565b1980831691505092915050565b600061088c8383610862565b9150826002028217905092915050565b6108a58261058c565b67ffffffffffffffff8111156108be576108bd6103bc565b5b6108c882546106b5565b6108d382828561080f565b600060209050601f83116001811461090657600084156108f4578287015190505b6108fe8582610880565b865550610966565b601f198416610914866106e6565b60005b8281101561093c57848901518255600182019150602085019450602081019050610917565b868310156109595784890151610955601f891682610862565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006109ca602683610597565b91506109d58261096e565b604082019050919050565b600060208201905081810360008301526109f9816109bd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610a36602083610597565b9150610a4182610a00565b602082019050919050565b60006020820190508181036000830152610a6581610a29565b905091905056fea264697066735822122071bc65295846568e6bd032dc52c053cf518168c828e8ad5870894422a8c0fb8664736f6c63430008130033";

type BaseTokenURIConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseTokenURIConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseTokenURI__factory extends ContractFactory {
  constructor(...args: BaseTokenURIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _baseTokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BaseTokenURI> {
    return super.deploy(
      _baseTokenURI,
      overrides || {}
    ) as Promise<BaseTokenURI>;
  }
  override getDeployTransaction(
    _baseTokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_baseTokenURI, overrides || {});
  }
  override attach(address: string): BaseTokenURI {
    return super.attach(address) as BaseTokenURI;
  }
  override connect(signer: Signer): BaseTokenURI__factory {
    return super.connect(signer) as BaseTokenURI__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseTokenURIInterface {
    return new utils.Interface(_abi) as BaseTokenURIInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseTokenURI {
    return new Contract(address, _abi, signerOrProvider) as BaseTokenURI;
  }
}
