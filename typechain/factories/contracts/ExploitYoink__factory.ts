/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ExploitYoink,
  ExploitYoinkInterface,
} from "../../contracts/ExploitYoink";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "redirectYoinkPowerTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "releaseTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "toggleYoinkPowerExtraction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "yoinkPowerExtractionActivated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "yoinkPowerReceiver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040526001600060146101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50604051620010693803806200106983398181016040528101906200005291906200021e565b6200007262000066620000e560201b60201c565b620000ed60201b60201c565b6200008e6726d6847a3e18b40460c01b620001b160201b60201c565b620000aa6710585de88e0105ad60c01b620001b160201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000250565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001e682620001b9565b9050919050565b620001f881620001d9565b81146200020457600080fd5b50565b6000815190506200021881620001ed565b92915050565b600060208284031215620002375762000236620001b4565b5b6000620002478482850162000207565b91505092915050565b608051610def6200027a600039600081816101f40152818161046c01526106660152610def6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100fa578063b33bf26e14610118578063d4cbceb114610136578063f2fde38b14610152578063fd7cebeb1461016e57610093565b8063137a0c6f14610098578063150b7a02146100b657806316b0f4e0146100e6578063715018a6146100f0575b600080fd5b6100a061018a565b6040516100ad919061097e565b60405180910390f35b6100d060048036038101906100cb9190610a9c565b61019d565b6040516100dd9190610b5f565b60405180910390f35b6100ee610354565b005b6100f86103d8565b005b6101026103ec565b60405161010f9190610b89565b60405180910390f35b610120610415565b60405161012d9190610b89565b60405180910390f35b610150600480360381019061014b9190610ba4565b6105ca565b005b61016c60048036038101906101679190610ba4565b6106f7565b005b61018860048036038101906101839190610ba4565b61077a565b005b600060149054906101000a900460ff1681565b60006101b3678ebb2892475abfc760c01b610816565b6101c76748a723e5d06625d660c01b610816565b6101db675adf65ec30402c4960c01b610816565b8573ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561025d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102819190610be6565b73ffffffffffffffffffffffffffffffffffffffff161480156102b7575060011515600060149054906101000a900460ff161515145b15610304576102d06739e8c4ab75d28c3160c01b610816565b6102e467c1e5a0ff337d56bf60c01b610816565b6102f8678ea6a00a815c6df660c01b610816565b600060e01b905061034b565b61031867fd0fb5088c414ee860c01b610816565b61032c6734b8c468fd4fa79760c01b610816565b61034067ef979c40b424dde460c01b610816565b63150b7a0260e01b90505b95945050505050565b6103686710064eeab34b582160c01b610816565b610370610819565b61038467318ec208eb5f91f960c01b610816565b61039867bb03b4680fef882860c01b610816565b6103ac67cbc263d38cac375560c01b610816565b600060149054906101000a900460ff1615600060146101000a81548160ff021916908315150217905550565b6103e0610819565b6103ea6000610897565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061042b674d3a2a500ff1f07560c01b610816565b61043f67df2353a39070a7b960c01b610816565b61045367771ae6cd735aae6560c01b610816565b3073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e60006040518263ffffffff1660e01b81526004016104c49190610c58565b602060405180830381865afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105059190610be6565b73ffffffffffffffffffffffffffffffffffffffff16036105865761053467958bd115079f6d8560c01b610816565b6105486733e008ae911c33c260c01b610816565b61055c67678d4f9737a8888a60c01b610816565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506105c7565b61059a674dface8cb1e7fc2a60c01b610816565b6105ae6772d37409f6ffca2360c01b610816565b6105c2678aa4455ededafca060c01b610816565b600090505b90565b6105de675a32df98a81c791e60c01b610816565b6105e6610819565b6105fa678afbd2d619dc59fa60c01b610816565b61060e671b211dfcd65444fe60c01b610816565b61062267b4293ed3d231070560c01b610816565b60008060146101000a81548160ff02191690831515021790555061065067df7358d26a66a0dd60c01b610816565b6106646756ae3d7dfa43b75f60c01b610816565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd308360006040518463ffffffff1660e01b81526004016106c293929190610c73565b600060405180830381600087803b1580156106dc57600080fd5b505af11580156106f0573d6000803e3d6000fd5b5050505050565b6106ff610819565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361076e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076590610d2d565b60405180910390fd5b61077781610897565b50565b61078e673cd62afd349a958460c01b610816565b610796610819565b6107aa67f7b86ca895eec0fb60c01b610816565b6107be67435037bb3b0d4c9460c01b610816565b6107d2673a5f97214ad3187c60c01b610816565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b50565b61082161095b565b73ffffffffffffffffffffffffffffffffffffffff1661083f6103ec565b73ffffffffffffffffffffffffffffffffffffffff1614610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c90610d99565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008115159050919050565b61097881610963565b82525050565b6000602082019050610993600083018461096f565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109ce826109a3565b9050919050565b6109de816109c3565b81146109e957600080fd5b50565b6000813590506109fb816109d5565b92915050565b6000819050919050565b610a1481610a01565b8114610a1f57600080fd5b50565b600081359050610a3181610a0b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610a5c57610a5b610a37565b5b8235905067ffffffffffffffff811115610a7957610a78610a3c565b5b602083019150836001820283011115610a9557610a94610a41565b5b9250929050565b600080600080600060808688031215610ab857610ab7610999565b5b6000610ac6888289016109ec565b9550506020610ad7888289016109ec565b9450506040610ae888828901610a22565b935050606086013567ffffffffffffffff811115610b0957610b0861099e565b5b610b1588828901610a46565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610b5981610b24565b82525050565b6000602082019050610b746000830184610b50565b92915050565b610b83816109c3565b82525050565b6000602082019050610b9e6000830184610b7a565b92915050565b600060208284031215610bba57610bb9610999565b5b6000610bc8848285016109ec565b91505092915050565b600081519050610be0816109d5565b92915050565b600060208284031215610bfc57610bfb610999565b5b6000610c0a84828501610bd1565b91505092915050565b6000819050919050565b6000819050919050565b6000610c42610c3d610c3884610c13565b610c1d565b610a01565b9050919050565b610c5281610c27565b82525050565b6000602082019050610c6d6000830184610c49565b92915050565b6000606082019050610c886000830186610b7a565b610c956020830185610b7a565b610ca26040830184610c49565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610d17602683610caa565b9150610d2282610cbb565b604082019050919050565b60006020820190508181036000830152610d4681610d0a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d83602083610caa565b9150610d8e82610d4d565b602082019050919050565b60006020820190508181036000830152610db281610d76565b905091905056fea2646970667358221220bf26524ecbbe4274d08ba0b1ed911ce035a571c2877fe3541793efe6b51b1ba464736f6c63430008130033";

type ExploitYoinkConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExploitYoinkConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExploitYoink__factory extends ContractFactory {
  constructor(...args: ExploitYoinkConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExploitYoink> {
    return super.deploy(_target, overrides || {}) as Promise<ExploitYoink>;
  }
  override getDeployTransaction(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_target, overrides || {});
  }
  override attach(address: string): ExploitYoink {
    return super.attach(address) as ExploitYoink;
  }
  override connect(signer: Signer): ExploitYoink__factory {
    return super.connect(signer) as ExploitYoink__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExploitYoinkInterface {
    return new utils.Interface(_abi) as ExploitYoinkInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExploitYoink {
    return new Contract(address, _abi, signerOrProvider) as ExploitYoink;
  }
}
