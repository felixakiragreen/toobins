/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ExploitYoink,
  ExploitYoinkInterface,
} from "../../contracts/ExploitYoink";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "redirectYoinkPowerTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "releaseTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "toggleYoinkPowerExtraction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "yoinkPowerExtractionActivated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "yoinkPowerReceiver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040526001600060146101000a81548160ff02191690831515021790555034801561002b57600080fd5b50604051610d94380380610d94833981810160405281019061004d91906101d2565b61006961005e6100a360201b60201c565b6100ab60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506101ff565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019f82610174565b9050919050565b6101af81610194565b81146101ba57600080fd5b50565b6000815190506101cc816101a6565b92915050565b6000602082840312156101e8576101e761016f565b5b60006101f6848285016101bd565b91505092915050565b608051610b6c610228600039600081816101b80152818161032c01526104360152610b6c6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100fa578063b33bf26e14610118578063d4cbceb114610136578063f2fde38b14610152578063fd7cebeb1461016e57610093565b8063137a0c6f14610098578063150b7a02146100b657806316b0f4e0146100e6578063715018a6146100f0575b600080fd5b6100a061018a565b6040516100ad91906106fb565b60405180910390f35b6100d060048036038101906100cb9190610819565b61019d565b6040516100dd91906108dc565b60405180910390f35b6100ee6102a0565b005b6100f86102d4565b005b6101026102e8565b60405161010f9190610906565b60405180910390f35b610120610311565b60405161012d9190610906565b60405180910390f35b610150600480360381019061014b9190610921565b610412565b005b61016c60048036038101906101679190610921565b6104c7565b005b61018860048036038101906101839190610921565b61054a565b005b600060149054906101000a900460ff1681565b60008573ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102459190610963565b73ffffffffffffffffffffffffffffffffffffffff1614801561027b575060011515600060149054906101000a900460ff161515145b1561028c57600060e01b9050610297565b63150b7a0260e01b90505b95945050505050565b6102a8610596565b600060149054906101000a900460ff1615600060146101000a81548160ff021916908315150217905550565b6102dc610596565b6102e66000610614565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60003073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e60006040518263ffffffff1660e01b815260040161038491906109d5565b602060405180830381865afa1580156103a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c59190610963565b73ffffffffffffffffffffffffffffffffffffffff160361040a57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061040f565b600090505b90565b61041a610596565b60008060146101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd308360006040518463ffffffff1660e01b8152600401610492939291906109f0565b600060405180830381600087803b1580156104ac57600080fd5b505af11580156104c0573d6000803e3d6000fd5b5050505050565b6104cf610596565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053590610aaa565b60405180910390fd5b61054781610614565b50565b610552610596565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61059e6106d8565b73ffffffffffffffffffffffffffffffffffffffff166105bc6102e8565b73ffffffffffffffffffffffffffffffffffffffff1614610612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060990610b16565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008115159050919050565b6106f5816106e0565b82525050565b600060208201905061071060008301846106ec565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061074b82610720565b9050919050565b61075b81610740565b811461076657600080fd5b50565b60008135905061077881610752565b92915050565b6000819050919050565b6107918161077e565b811461079c57600080fd5b50565b6000813590506107ae81610788565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107d9576107d86107b4565b5b8235905067ffffffffffffffff8111156107f6576107f56107b9565b5b602083019150836001820283011115610812576108116107be565b5b9250929050565b60008060008060006080868803121561083557610834610716565b5b600061084388828901610769565b955050602061085488828901610769565b94505060406108658882890161079f565b935050606086013567ffffffffffffffff8111156108865761088561071b565b5b610892888289016107c3565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6108d6816108a1565b82525050565b60006020820190506108f160008301846108cd565b92915050565b61090081610740565b82525050565b600060208201905061091b60008301846108f7565b92915050565b60006020828403121561093757610936610716565b5b600061094584828501610769565b91505092915050565b60008151905061095d81610752565b92915050565b60006020828403121561097957610978610716565b5b60006109878482850161094e565b91505092915050565b6000819050919050565b6000819050919050565b60006109bf6109ba6109b584610990565b61099a565b61077e565b9050919050565b6109cf816109a4565b82525050565b60006020820190506109ea60008301846109c6565b92915050565b6000606082019050610a0560008301866108f7565b610a1260208301856108f7565b610a1f60408301846109c6565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610a94602683610a27565b9150610a9f82610a38565b604082019050919050565b60006020820190508181036000830152610ac381610a87565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b00602083610a27565b9150610b0b82610aca565b602082019050919050565b60006020820190508181036000830152610b2f81610af3565b905091905056fea26469706673582212202c73ff750107f7833f5cd9f281ad28c1ae9826673917b8e3d3d917490988044b64736f6c63430008130033";

type ExploitYoinkConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExploitYoinkConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExploitYoink__factory extends ContractFactory {
  constructor(...args: ExploitYoinkConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExploitYoink> {
    return super.deploy(_target, overrides || {}) as Promise<ExploitYoink>;
  }
  override getDeployTransaction(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_target, overrides || {});
  }
  override attach(address: string): ExploitYoink {
    return super.attach(address) as ExploitYoink;
  }
  override connect(signer: Signer): ExploitYoink__factory {
    return super.connect(signer) as ExploitYoink__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExploitYoinkInterface {
    return new utils.Interface(_abi) as ExploitYoinkInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExploitYoink {
    return new Contract(address, _abi, signerOrProvider) as ExploitYoink;
  }
}
