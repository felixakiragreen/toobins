/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockMoonbirds,
  MockMoonbirdsInterface,
} from "../../contracts/MockMoonbirds";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610165806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806370a0823114610030575b600080fd5b61004a600480360381019061004591906100ce565b610060565b6040516100579190610114565b60405180910390f35b600060019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009b82610070565b9050919050565b6100ab81610090565b81146100b657600080fd5b50565b6000813590506100c8816100a2565b92915050565b6000602082840312156100e4576100e361006b565b5b60006100f2848285016100b9565b91505092915050565b6000819050919050565b61010e816100fb565b82525050565b60006020820190506101296000830184610105565b9291505056fea26469706673582212209cc2c2f3e4e50cedf50aa67a83d6915027501e796342a143148772165911681a64736f6c63430008130033";

type MockMoonbirdsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockMoonbirdsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockMoonbirds__factory extends ContractFactory {
  constructor(...args: MockMoonbirdsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockMoonbirds> {
    return super.deploy(overrides || {}) as Promise<MockMoonbirds>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockMoonbirds {
    return super.attach(address) as MockMoonbirds;
  }
  override connect(signer: Signer): MockMoonbirds__factory {
    return super.connect(signer) as MockMoonbirds__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMoonbirdsInterface {
    return new utils.Interface(_abi) as MockMoonbirdsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockMoonbirds {
    return new Contract(address, _abi, signerOrProvider) as MockMoonbirds;
  }
}
