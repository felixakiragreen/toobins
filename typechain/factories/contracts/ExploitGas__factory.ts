/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ExploitGas,
  ExploitGasInterface,
} from "../../contracts/ExploitGas";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161065538038061065583398181016040528101906100329190610106565b61004c675003952c8197ae0560c01b6100a060201b60201c565b6100666756f832b2f8d52e9660c01b6100a060201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050610133565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d3826100a8565b9050919050565b6100e3816100c8565b81146100ee57600080fd5b50565b600081519050610100816100da565b92915050565b60006020828403121561011c5761011b6100a3565b5b600061012a848285016100f1565b91505092915050565b60805161050861014d600039600060a001526105086000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004a6004803603810190610045919061037d565b610060565b6040516100579190610440565b60405180910390f35b60006100766740e7f9f4e8ae86b660c01b61026c565b61008a67b715a623b3cd4b6c60c01b61026c565b61009e67ce94a4511914293260c01b61026c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561010a5750610109673f94737254444f3d60c01b61026f565b5b806101315750600084148015610130575061012f6722de3dd73650a2e660c01b61026f565b5b5b156101815761014a67a71f3b3c6f8871fa60c01b61026c565b61015e67edda31b28accc60060c01b61026c565b6101726768403c143fc8f91660c01b61026c565b63150b7a0260e01b9050610263565b61019567d09bd281234a265a60c01b61026c565b6101a9679698fa43babdec4060c01b61026c565b6101bd675da4d7e51435edb760c01b61026c565b60005b6109c481101561022f576101de679ba520cc7fa8532d60c01b61026c565b6101f267fb996b1f1c0ecc9c60c01b61026c565b60006001908060018154018082558091505060019003906000526020600020016000909190919091505580806102279061048a565b9150506101c0565b5061024467887feb438b5028be60c01b61026c565b61025867089a5f0c5658332760c01b61026c565b63150b7a0260e01b90505b95945050505050565b50565b600060019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102af82610284565b9050919050565b6102bf816102a4565b81146102ca57600080fd5b50565b6000813590506102dc816102b6565b92915050565b6000819050919050565b6102f5816102e2565b811461030057600080fd5b50565b600081359050610312816102ec565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261033d5761033c610318565b5b8235905067ffffffffffffffff81111561035a5761035961031d565b5b60208301915083600182028301111561037657610375610322565b5b9250929050565b6000806000806000608086880312156103995761039861027a565b5b60006103a7888289016102cd565b95505060206103b8888289016102cd565b94505060406103c988828901610303565b935050606086013567ffffffffffffffff8111156103ea576103e961027f565b5b6103f688828901610327565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61043a81610405565b82525050565b60006020820190506104556000830184610431565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610495826102e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036104c7576104c661045b565b5b60018201905091905056fea26469706673582212202526ef279df140ef3da369df8e6f4509a4abc8ab0c355ab30e461ad3a2de58d464736f6c63430008130033";

type ExploitGasConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExploitGasConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExploitGas__factory extends ContractFactory {
  constructor(...args: ExploitGasConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExploitGas> {
    return super.deploy(_target, overrides || {}) as Promise<ExploitGas>;
  }
  override getDeployTransaction(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_target, overrides || {});
  }
  override attach(address: string): ExploitGas {
    return super.attach(address) as ExploitGas;
  }
  override connect(signer: Signer): ExploitGas__factory {
    return super.connect(signer) as ExploitGas__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExploitGasInterface {
    return new utils.Interface(_abi) as ExploitGasInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExploitGas {
    return new Contract(address, _abi, signerOrProvider) as ExploitGas;
  }
}
