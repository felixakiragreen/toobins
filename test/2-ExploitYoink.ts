import { ethers } from 'hardhat'
import chai from 'chai'

import {
	Toobins,
	Toobins__factory,
	MockMoonbirds,
	MockMoonbirds__factory,
	ExploitYoink,
	ExploitYoink__factory,
	ToobinsWithExploitableYoink,
	ToobinsWithExploitableYoink__factory,
} from '../typechain'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'

const { expect } = chai
const { constants, utils } = ethers
const { parseEther, getAddress } = utils
const { AddressZero } = constants

const DELEGATION_REGISTRY = '0x00000000000076A84feF008CDAbe6409d2FE638B'

chai.should() // if you like should syntax

describe('ExploitYoink', () => {
	let toobins: Toobins
	let moonbirds: MockMoonbirds
	let exploitYoink: ExploitYoink
	let toobinsWithExploitableYoink: ToobinsWithExploitableYoink

	let owner: SignerWithAddress
	let other1: SignerWithAddress
	let other2: SignerWithAddress
	let other3: SignerWithAddress
	let other4: SignerWithAddress
	let other5: SignerWithAddress
	let exploiter: SignerWithAddress
	let others: SignerWithAddress[]

	before(async () => {
		;[
			//
			owner,
			other1,
			other2,
			other3,
			other4,
			other5,
			exploiter,
			...others
		] = await ethers.getSigners()

		// deploy Moonbirds contract
		const moonbirdsFactory = (await ethers.getContractFactory(
			'MockMoonbirds',
			owner,
		)) as MockMoonbirds__factory
		moonbirds = await moonbirdsFactory.deploy()

		// deploy Toobins contract AND pass in the address of the Edworm contract
		const toobinsFactory = (await ethers.getContractFactory(
			'Toobins',
			owner,
		)) as Toobins__factory

		toobins = await toobinsFactory.deploy(
			moonbirds.address,
			'',
			DELEGATION_REGISTRY,
		)

		await toobins.deployed()

		// deploy ExploitYoink contract

		const exploitYoinkFactory = (await ethers.getContractFactory(
			'ExploitYoink',
			exploiter,
		)) as ExploitYoink__factory

		exploitYoink = await exploitYoinkFactory.deploy(toobins.address)

		await exploitYoink.deployed()

		// deploy ToobinsWithExploitableYoink contract

		const toobinsWithExploitableYoinkFactory = (await ethers.getContractFactory(
			'ToobinsWithExploitableYoink',
			owner,
		)) as ToobinsWithExploitableYoink__factory

		toobinsWithExploitableYoink =
			await toobinsWithExploitableYoinkFactory.deploy(
				moonbirds.address,
				'',
				DELEGATION_REGISTRY,
			)

		await toobinsWithExploitableYoink.deployed()
	})

	describe('SETUP', async () => {
		it('should mint moonbirds', async () => {
			await moonbirds.connect(other1).mint()
			await moonbirds.connect(other2).mint()
			await moonbirds.connect(other3).mint()
			await moonbirds.connect(other4).mint()

			expect(await moonbirds.balanceOf(other1.address)).to.eq(1)
			expect(await moonbirds.balanceOf(other2.address)).to.eq(1)
			expect(await moonbirds.balanceOf(other3.address)).to.eq(1)
			expect(await moonbirds.balanceOf(other4.address)).to.eq(1)
		})

		it('should initiate Toobins run', async () => {
			await toobins.initiate(other1.address)
			await toobinsWithExploitableYoink.initiate(other1.address)

			expect(await toobins.ownerOf(0)).to.eq(other1.address)
			expect(await toobinsWithExploitableYoink.ownerOf(0)).to.eq(other1.address)
		})

		it('should transfer Toobins to valid addresses', async () => {
			await toobins.connect(other1).pass(other2.address)
			await toobinsWithExploitableYoink.connect(other1).pass(other2.address)

			expect(await toobins.ownerOf(0)).to.eq(other2.address)
			expect(await toobins.balanceOf(other1.address)).to.eq(1)
			expect(await toobins.balanceOf(other2.address)).to.eq(1)
			expect(await toobinsWithExploitableYoink.ownerOf(0)).to.eq(other2.address)
			expect(await toobinsWithExploitableYoink.balanceOf(other1.address)).to.eq(
				1,
			)
			expect(await toobinsWithExploitableYoink.balanceOf(other2.address)).to.eq(
				1,
			)

			await toobins.connect(other2).pass(other3.address)
			await toobinsWithExploitableYoink.connect(other2).pass(other3.address)

			expect(await toobins.ownerOf(0)).to.eq(other3.address)
			expect(await toobins.balanceOf(other2.address)).to.eq(1)
			expect(await toobins.balanceOf(other3.address)).to.eq(1)
			expect(await toobinsWithExploitableYoink.ownerOf(0)).to.eq(other3.address)
			expect(await toobinsWithExploitableYoink.balanceOf(other2.address)).to.eq(
				1,
			)
			expect(await toobinsWithExploitableYoink.balanceOf(other3.address)).to.eq(
				1,
			)

			await toobins.connect(other3).pass(other4.address)
			await toobinsWithExploitableYoink.connect(other3).pass(other4.address)

			expect(await toobins.ownerOf(0)).to.eq(other4.address)
			expect(await toobins.balanceOf(other3.address)).to.eq(1)
			expect(await toobins.balanceOf(other4.address)).to.eq(1)
			expect(await toobinsWithExploitableYoink.ownerOf(0)).to.eq(other4.address)
			expect(await toobinsWithExploitableYoink.balanceOf(other3.address)).to.eq(
				1,
			)
			expect(await toobinsWithExploitableYoink.balanceOf(other4.address)).to.eq(
				1,
			)
		})
	})

	describe('EXPLOIT', async () => {
		it('should transfer Toobins to the exploiter', async () => {
			// first mint a moonbird to the exploiter & exploitYoink contract
			await moonbirds.connect(exploiter).mint()
			await moonbirds.connect(exploiter).mintTo(exploitYoink.address)

			// then transfer Toobins to the exploiter
			await toobins.connect(other4).pass(exploiter.address)

			expect(await toobins.ownerOf(0)).to.eq(exploiter.address)

			// then transfer Toobins to the exploitYoink contract

			await toobins.connect(exploiter).pass(exploitYoink.address)
			expect(await toobins.ownerOf(0)).to.eq(exploitYoink.address)
		})

		it('should prevent the yoink from being exploited', async () => {
			// this should not fail
			await toobins.yoink()

			expect(await toobins.ownerOf(0)).to.eq(owner.address)

			// this should fail
			expect(await toobinsWithExploitableYoink.yoink()).to.be.revertedWith(
				'ERC721: transfer to non ERC721Receiver implementer',
			)
		})
	})
})
